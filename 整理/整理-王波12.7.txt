window.onload = function test() {
        var arr2=[{name: '1', age: 13}, {name: '2', age: 13}];
		var arr1=[{name: '1', age: 12}, {name: '2', age: 11}, {name: '3', age: 133}];
        var resultArr = [];
        arr2.forEach(item =>{
            resultArr.push( arr1.filter(items => items.name === item.name)[0] );
        })
        console.log(resultArr)
    }

v-show里面带入click事件要加上 el-input
slot里面不能使用v-show
11.24
Object.keys();获取对象或则数字的key。方便对key处理
Object.defineProperty(obj, name,des),对象上生成一个属性，或则对原属性进行修改,并返回这个对象
obj:操作的对象
name: 属性名称
des: writable,enumerable,  
get()； 属性被访问，自动调用
set();  属性被赋值，自动调用
例子
var obj={};
Object.defineProperty(obj, name, {
	set: (val)=> {
		console.log('赋值'+val);
	},
	get: ()=> {
		console.log('取值');
		return 'wangbo'
	},
});
var Book = {}
var name = '';
Object.defineProperty(Book, 'name', {
  set: function (value) {
    name = value;
    console.log('你取了一个书名叫做' + value);
  },
  get: function () {
    return '《' + name + '》'
  }
})
 
 
Book.name = 'vue权威指南';  // 你取了一个书名叫做vue权威指南
console.log(Book.name);  // 《vue权威指南》
Vue基于此实现双向绑定，达到响应式目的【发布者订阅者模式】，利用其数据劫持，获取各个属性的getter setter数据变动时发布消息给订阅者，触发相应的监听回调
let data = {
  name: '123',
  age: {age: 123}
};
let handler = {
  get: function(obj, key) {
    return Reflect.get(obj, key);
  },
  set: function(obj, key, value) {
    return Reflect.set(obj, key, value);
  }
};
let xy = new Proxy(data, handler);
1. 数据劫持--监听所有属性--监听者 Observer     Dep
2. 观察者Watcher 视图的更新
3. Compile
获取文档中 id="demo" 的元素： document.querySelector("#demo");
键盘事件
onkeydown 用户按下任何键盘键时触发 （value可能不存在）
onkeyup 用户松开任何之前的键   （val已存在）
onkeypress 用户松开任何之前的字母或则数字键触发
var a = {};
    var arr = [];
    Object.defineProperty(a, 'name', {
      set: (val)=> {
        arr['name'] = val;
      },
      get: () => {
        return arr['name'];
      }
    });
    var de1 = document.querySelector('#input1');
    var de2 = document.querySelector('#input2');
    de1.onkeyup = ()=> {
      a.name = de1.value;
      de2.value = arr['name'];
    };
Proxy();

JS
所有的数组实例均会从Array.prototype继承属性和方法
Array.prototype.constructor();
Function.prototype.constructor();
apply与call
Object.__proto__
//给定一个字符串S，检查是否能重新排布其中的字母，使得两相邻的字符不同
var reorganizeString = function(S) {
     const len=S.length;
    if(len===0) return ""
    //用于存放字符及其数量
    let hashArr = new Array(26).fill(0);//new Array(10).fill(1);
    for(let i=0;i<S.length;i++){
        let item = hashArr[S[i].charCodeAt()-97];//一一匹配
        if(item){
            item.count++;
        }else{
            hashArr[S[i].charCodeAt()-97] = {name:S[i],count:1}
        }
    }
    hashArr = hashArr.filter((v)=>v!=0); //，过滤，把没出现的数字去掉，减少后面遍历次数
    hashArr.sort((a,b)=>(b.count-a.count)); //按count大小降序排列
    if(hashArr[0].count>Math.ceil(S.length/2)){
        //这里是无法构造的情况
        return ""
    }else{
        //这里是可以构造的
        let res=new Array(hashArr[0].count).fill(hashArr[0].name)//[a,a,a] aaabc
        // let cur = 1;//表示hashArr的索引
        let i = 1;//aaabb
        //开始构造输出的数据，隔一个插入一个
        for(let cur=1;cur<hashArr.length;){
            res.splice(i,0,hashArr[cur].name); //[a,b,a,a] [a,b,a,c,a]
            hashArr[cur].count--;
            if(hashArr[cur].count===0){ //开始第二个
                cur++;
            }
            //隔一个插入
            i=i+2 //
        }
         return res.join('');
    }  
};

// 输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
// 输出：7 -> 0 -> 8
// 原因：342 + 465 = 807
var addTwoNumbers = function(l1, l2) {
  let add = 0;
  let sum = new ListNode('0');
  let head = sum;
  while(add || l1 || l2) {
    let val1 = l1 !== null ? l1.val : 0;
    let val2 = l2 !== null ? l2.val : 0;
    let sums = val1 + val2 + add;
    add = sums > 10 ? 1: 0;
    sum.next = new ListNode(sums %10)
    sum = sum.next;
    if (l1) l1 = l1.next 
    if (l2) l2 = l2.next 
  }
  return head.next;
}
12.1
1. 3000N一个缺陷
2. https切http的代码验证
3. 熟悉访客模块
Failed to sign in. Please open the output channel for details


回过头来看，这里的渲染逻辑并不是特别复杂，核心关键的几步流程还是非常清晰的：

new Vue，执行初始化
挂载$mount方法，通过自定义Render方法、template、el等生成Render函数
通过Watcher监听数据的变化
当数据发生变化时，Render函数执行生成VNode对象
通过patch方法，对比新旧VNode对象，通过DOM Diff算法，添加、修改、删除真正的DOM元素


其主要逻辑为当VNode为真实元素或旧的VNode和新的VNode完全相同时，直接调用createElm方法生成真实的DOM树，当VNode新旧存在差异时，
则调用patchVnode方法，通过比较新旧VNode节点，
根据不同的状态对DOM做合理的添加、删除、修改DOM（这里的Diff算法有兴趣的读者可以自行阅读patchVnode方法，鉴于篇幅不再赘述），再调用createElm生成真实的DOM树。

链表【单向与双向】
let Node = (element) => {
      this.element = element;
      this.next = null; //指针 节点值与指针
      this.prev = null;
      let previous = this.getElementAt(position - 1);
      node.next = previous.next;
      previous.next = node;
      //删除的时候 A => B => C
      let current = this.head;
      revious.next = revious.next.next;
      current = current.next;//只支持单向的
    }
12.7 
Node 设计模式中的观察者模式
事件loop循环
node leetcode 设计模式以及js github websocket
12.9
随着前端模块化的实现，代码在经过自动化工具打包后都会被压缩混淆，当代码混淆后，在浏览器调试时是如何定位到源文件代码的呢？

这时 sourceMap 就应运而生，sourceMap 是有 Google 提出并在 chrome 上实现，采用Base64 VLQ编码，能根据特定的规则匹配到源文件的代码位置2、服务器下发选中的关联关系

//vue2.0-node-react-vue3借助视频，其他浏览知识以及面试题目leecode

is动态切换组件以及消除某些限制table里面输入组件，渲染到外面问题

高阶函数，函数作为参数传递，注册监听函数
function f1(callback) {
	let a;
	callback(a)
}
var f2 = function() {
	console.log('123123');
}
f1(f2);

响应式原则
v-for 中的key 唯一性 更新DOM， 虚拟DOM diff算法，自动识别相同的key
可以这样简单地理解，无：key属性时，状态默认绑定的是位置；有：key属性时，状态根据key的属性值绑定到了相应的数组元素。

ABC
ABC
ACB
fiddler node自动化工具

const VueTem = require('vue-template-compiler');
VueTem.compile(`<div>123</div>`);


    const throttle = (hanldler, delay) => {
      let pre = Date.now();
      return () => {
        let now = Date.now();
        if (now - pre >= delay) {
          hanldler();
          pre = Date.now();
        }
      };
    };
    const hanldlers = () => {
      console.log('123');
    };
    window.addEventListener('resize', throttle(hanldlers, 2000), true); //默认事件为冒泡 true为捕获
    window.addEventListener('scroll', throttle(hanldlers, 2000), true);
    const debounce = (hanldlers, delay)=> {
      let times = null;
      return () => {
        if(times) {
          clearTimeout(times);
        }
        times = setTimeout(hanldlers, delay);
      }
    };
    debounce(hanldlers, 1000);
    //节流就是在规定的时间内执行方法
    //防抖就是在n秒内只会执行一次，如果n秒以内就再次触发，则重新计算时间
    //防抖就是在n秒内只会执行一次，如果n秒以内就再次触发，则重新计算时间


//监听者来监听数据变化
function observer(data) {
  if (!data || typeof data === 'object') {
    return false;
  }
  Object.keys(data).forEach(key => {
    defs(data, key, data[key]);
  });
}
function defs (data, key, value) {
  observer(data);
  let deep = new Dep();
  Object.definedProperity(data, key, {
    get: function() {
      Deep.target ? deep.addSub(Deep.target) : '';
      return value;
    },
    set(newValue) {
      if (newValue === value) {
        value = newValue;
        deep.notify();
      }
    }
  });
}
//dep订阅容器
function Dep() {
  this.subs = [];
}
Deep.prototype = {
  addSub: function(sub) { //sub为订阅者
    this.subs.push(sub);
  },
  notify: function() {
    this.subs.forEach(sub => {
      sub.update();
    });
  }
};

//订阅者watcher
class Watcher {
  constructor(vm, el, cd) { //cd为输入框赋值方法
    this.vm = vm;
    this.el = el;
    this.cd = cd;
	this.value = this.get();  // 将自己添加到订阅器的操作
  }
  get() {
    Deep.target = this; //js 是单线程的，所以我们就可以在每一个观察者获取旧值的时候，给这个观察者添加一个 target 属性，这个属性就指向它这个观察者本身。之后就把这个 target 清除。
    let value = '123';
    Deep.target = null;
    return value;
  }
  update() {
    let news = '1123';
    this.cd(news);
  }
}
let re = new Watcher();
//给一个输入框new一个watcher即可
const solveSudoku = (board) => {
  const hasConflit = (r, c, val) => {  // 判断是否有行列和框框的冲突
    for (let i = 0; i < 9; i++) {
      if (board[i][c] == val || board[r][i] == val) { // 行或列里有冲突
        return true;
      }
    }
    const subRowStart = Math.floor(r / 3) * 3; // 对于小框，行有三种起始索引 0、3、6
    const subColStart = Math.floor(c / 3) * 3; // 对于小框，列有三种起始索引 0、3、6
    for (let i = 0; i < 3; i++) {              // 遍历所在的小框
      for (let j = 0; j < 3; j++) {
        if (val == board[subRowStart + i][subColStart + j]) { // 发现了重复数
          return true;
        }
      }
    }
    return false; // 没有发生冲突
  };

  const fill = (i, j) => {
    if (j == 9) {            // 列越界，填完一行，填下一行
      i++;
      j = 0;
      if (i == 9) return true; // 都填完了，返回true
    }
    if (board[i][j] != ".") return fill(i, j + 1); // 不是空白格，递归填下一格

    for (let num = 1; num <= 9; num++) {           // 枚举出当前格的所有可填的选择
      if (hasConflit(i, j, String(num))) continue; // 如果存在冲突，跳过这个选择
      board[i][j] = String(num);                   // 作出一个选择
      if (fill(i, j + 1)) return true; // 如果基于它，填下一格，最后可以解出数独，直接返回true
      board[i][j] = ".";               // 如果基于它，填下一格，填1-9都不行，回溯，恢复为空白格
    }
    return false; // 尝试了1-9，每个都往下递归，都不能做完，返回false
  };

  fill(0, 0); // 从第一个格子开始填
  return board;
};

this.$forceUpdate();强制调用render渲染函数，渲染数据

事件循环机制：
JS引擎线程会维护一个执行栈，同步代码会依次加入到执行栈中依次执行并出栈。//注意：每次只有一个任务在栈中

JS引擎线程遇到异步函数，会将异步函数交给相应的Webapi，而继续执行后面的任务。

Webapi会在条件满足的时候，将异步对应的回调加入到消息队列中，等待执行。

执行栈为空时，JS引擎线程会去取消息队列中的回调函数（如果有的话），并加入到执行栈中执行。

完成后出栈，执行栈再次为空，重复上面的操作，这就是事件循环(event loop)机制。




ue路由切换时，会先加载新的组件，等新的组件渲染好但是还没有挂载前，销毁旧的组件，之后挂载新组件，如下图所示：
新组件beforeCreate
        ↓
新组件created
        ↓
新组件beforeMount
        ↓
旧组件beforeDestroy
        ↓
旧组件destroyed
        ↓
新组件mounted
注意，在$emit时，必须已经$on，否则将无法监听到事件。
所以正确的写法应该是在需要接收值的组件的created生命周期函数里写$on，在需要往外传值的组件的destroyed生命周期函数函数里写：

destroyed(){
  eventBus.$emit('dataUpdate',data)
}

AOP(面相切面编程)： 主要作用是把一些跟核心业务逻辑模块无关的功能抽离出来。
例如：日志统计，异常处理等。把这些功能抽离出来后，通过"动态植入"的方法，掺入到业务逻辑模块中。这样做的好处是保证业务逻辑模块的纯净和高内聚，其次可以方便的复用日志统计等功能模块


function say(who) {
    console.log(who + 'hello');
}

Function.prototype.before = function(beforeFunc) {
        // this  箭头函数中没有this  也没有arguments
        return (...args) => { // ['我']
            beforeFunc();
            this(...args);
        }
    }
    // beforeSay 是一个包装后的函数

let beforeSay = say.before(() => {
    console.log('开始说话')
})

beforeSay('我');

//开始说话
//我


// 判断数据类型
// typeof instanceof contructor Object.prototype.toString.call 

function isType(type){ // 变量
    return function(content){
        return Object.prototype.toString.call(content) === "[object "+type+"]";
    }
}   
// isString isArray isBoolean
let types = ['String','Boolean','Number','Null','Undefined'];
let utils = {}; // 工具库
for(let i = 0 ; i< types.length;i++){
    let type = types[i]
    utils['is'+type] = isType(type);
    // utils.isString = function 预制参数 和 bind一样
}
let flag = utils.isString('hello');
console.log(flag);

函数柯里化：多个参数的传入，把他转化成 n个函数，可以暂存变量(主要用于缓存，将参数缓存到代码中，在返回一个新的函数直到参数都传递完成后调用最后的函数)
一般柯里化参数的要求都是一个个的传 ==》多个参数传入就是偏函数
实现通用的函数柯里化
function curring(fn){
  const inner = (args=[])=>{
    return args.length >= fn.length ? fn(...args) : (...userArgs)=> inner([...args,...userArgs])
  }
  return inner()
}``

for(let i = 0; i < n; i++){
    t.push(0);
}
for(let i = 0; i < n; i++){
    temp.push([...t]);//注意不能直接temp.push(t),直接赋值的话为浅拷贝，新数组只是原对象的一个引用
}
2、判断当前位置能否摆放
主要是在斜线上的判断，需要沿四个方向扩展出去。

//判断能否摆放
var judge = function(i,j,n){
    //横
    for(let k = 0;k < n; k++){
        if(temp[i][k] == 1) return 0;
    }
    //竖
    for(let k = 0;k < n; k++){
        if(temp[k][j] == 1) return 0;
    }
    //斜
    for(let k = 1; k + j < n && i - k >= 0; k++){
        if(temp[i - k][j + k] == 1) return 0;
    }
    for(let k = 1; k + i < n && j - k >= 0; k++){
        if(temp[i + k][j - k] == 1) return 0;
    }
    for(let k = 1; k + i < n && j + k < n; k++){
        if(temp[i + k][j + k] == 1) return 0;
    }
    for(let k = 1; i - k >= 0 && j - k >= 0; k++){
        if(temp[i - k][j - k] == 1) return 0;
    }
    return 1;
}
3、深搜回溯
//深搜遍历
var dfs = function(e,n){
    //遍历当前行的每一列
    for(let i = 0;i < n; i++){
        //判断能否摆放
        if(temp[e][i] == 0 && judge(e,i,n)){
            //标记当前位置已摆放
            temp[e][i] = 1;
            //已经摆置n个皇后
            if(e == n-1){
                var ans = [];
                for(let i1 = 0; i1 < n; i1++){
                    var a = "";
                    for(let i2 = 0; i2 < n; i2++){
                        //格式化输出
                        if(temp[i1][i2] == 0) a += ".";
                        else a += "Q";
                    }
                    ans.push(a);
                }
                //将当前结果放进列表
                res.push(ans);
            }else{
                //没够n个，继续往下遍历
                dfs(e+1,n);
            }
        }
        //回溯，取消标记
        temp[e][i] = 0;
    }
}
 dfs(0,n);
 
 
攻击者可以通过注入恶意脚本获取用户的 Cookie 信息。通常 Cookie 中都包含了用户的登录凭证信息，攻击者在获取到 Cookie 之后，则可以发起 Cookie 劫持攻击。所以，严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。

XSS 防御中，输入检查一般是检查用户输入的数据中是否包含 <，> 等特殊字符，如果存在，则对特殊字符进行过滤或编码，这种方式也称为 XSS Filter
验证码被认为是对抗 CSRF 攻击最简洁而有效的防御方法。
根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。通过 Referer Check，可以检查请求是否来自合法的”源”。

可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。
1.防御XSS攻击

HttpOnly 防止劫取 Cookie

用户的输入检查


2.防御CSRF攻击

  验证码
  request Header   Referer Check   Token 验证

atob() 方法用于解码使用 base-64 编码的字符串。

base-64 编码使用方法是 btoa() 。

Blob，Binary Large Object的缩写，代表二进制类型的大对象

this.$axios
  .post(url接口地址, params请求参数, {
    headers: {
      token: token
    },
    responseType: "arraybuffer"
  })
  .then((file) => {
    let content = file.data;
    // 组装a标签
    let elink = document.createElement("a");
    // 设置下载文件名
    elink.download = "附件.zip";
    elink.style.display = "none";
    let blob = new Blob([content], {type: "application/zip"})
    elink.href = URL.createObjectURL(blob);
    document.body.appendChild(elink);
    elink.click();
    document.body.removeChild(elink);
  })
  
  注意：responseType应设置为：'arraybuffer'，这样返回的文件流才会是二进制的，才能使用new Blob得到正确的文件

  
  onreadystatechange	存储函数（或函数名），每当readyState属性改变时，就会调用该函数。
readyState	
存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。    客户端 ---xml 对象----服务器

0: 请求未初始化

1: 服务器连接已建立
//
有两个字符串str和str2，求出两个字符串中最长公共子串长度。

比如：str=acbcbcef，str2=abcbced，则str和str2的最长公共子串为bcbce，最长公共子串长度为5。

算法思路：
1、把两个字符串分别以行和列组成一个二维矩阵。

2、比较二维矩阵中每个点对应行列字符中否相等，相等的话值设置为1，否则设置为0。

3、通过查找出值为1的最长对角线就能找到最长公共子串。
request Header   Referer Check   Token 验证

public class LCS_1 {
    public static void main(String[] args) {
        LCS_1 lcs = new LCS_1();
        String str = lcs.getLSC("acbcbcef","abcbced");
        System.out.println(str);
    }

    private String getLSC(String A, String B) {
        int[][] dp = new int[B.length()][A.length()];
        int end_index = 0;
        int maxLength = 0;
        for(int i = 0; i < A.length(); i++) {
            for(int j = 0; j < B.length(); j++) {
                if(B.charAt(j) == A.charAt(i)) {
                    if(i == 0 || j == 0) {
                        dp[i][j] = 1;
                    } else {
                        dp[i][j] = dp[i - 1][j - 1] + 1;
                    }

                    if(dp[i][j] > maxLength) {
                        maxLength = dp[i][j];
                        end_index = j;
                    }
                }
            }
        }
        System.out.println("maxLength = " + maxLength);
        System.out.println("end_index = " + end_index);
        end_index += 1;
        return B.substring(end_index - maxLength,end_index);
    }
}

用动态规划的方法
使得word1[0]-word1[i]与word2[0]-word2[j]匹配的情况：
word1[0]-word1[i-1]与word2[0]-word2[j-1]已经匹配且word1[i] == word2[j]
word1[0]-word1[i-1]与word2[0]-word2[j-1]已经匹配且word1[i] != word2[j]
word1[0]-word1[i-1]与word2[0]-word2[j]已经匹配
word1[0]-word1[i]与word2[0]-word2[j-1]已经匹配
对于以上几种情况：

不用操作，dp[i][j] = dp[i-1][j-1]
将word1[i]替换成word2[j] ，多一步操作，dp[i][j] = dp[i-1][j-1] + 1
将word1[i]删除，多一步操作，dp[i][j] = dp[i-1][j] + 1
插入word2[j]，多一步操作，dp[i][j] = dp[i][j-1] + 1


     int m = word1.length();
        int n = word2.length();
        
        int dp[][] = new int[m + 1][n + 1];
        //""经过0次变换成为""
        dp[0][0] = 0;
        
        //base case
        //1.dp的第一列初始化：表示word1经过多少次删除操作成为空串""
        for(int i = 1; i <= m; i++) {
            dp[i][0] = i; 
        }
        
        //1.dp的第一列初始化：表示空串""经过多少次添加操作成为word2
        for(int j = 1; j <= n; j++) {
            dp[0][j] = j; 
        }
                

        //  自底向上求解
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if(word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    //dp[i - 1][j] + 1 表示删除word1中i处的字符（因为该字符不在word2的j中），操作次数+1
                    //dp[i][j - 1] + 1 表示word1在i之后添加一个字符匹配word2的j处字符，操作次数+1
                    //dp[i - 1][j - 1] + 1 表示将word1的i处字符替换为word2的j处字符，操作次数+1
                    dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1);
                }
            }
        }
        
        // 储存着整个 word1 和 word2 的最小编辑距离
        return dp[m][n];
    }
	
	const createMarkup = () => {
    return 123;
}
<div dangerouslySetInnerHTML={createMarkup}></div>
/*defaultValue  Babel react编译器
打包器  webpack/Browserify
$ browserify main.js > bundle.js
main.js 需要的所有其它文件都会被编译进 bundle.js 中，包括很多层 require() 的情况也会一起被递归式的编译过来。
编译好的 js可以直接拿到浏览器使用
<script src="bundle.js"></script>
npm yarn 包管理器
CDN代表内容传送网络。CDN从全球各地的服务器网络提供缓存的静态内容。
jsx 被编译为React.creatElement()
element最小的分子
组件
function Compons (props) {
    return <div>{props}</div>
}
es6: 
class Compons extends React.Component { 
    render () {
        return <div>{this.props}</div>
    }
}

props父-子 只是可读的；若响应式则使用state

props.children获取子节点  结合React.Children使用

es6 import React form 'react' es5: var React = inquire('react');
React.Component
React.PureComponent // 用于避免重复渲染（执行render函数），提高效率  但至少浅层比较
isValidElement()
React.cloneElement(
  element,  [props],  [...children])

创建一个实例的并挂在到DOM上
constructor()
componentWillMount()
render()
componentDidMount()
更新
componentWillReceiveProps()
componentWillReceiveProps()在挂载组件接收新道具之前被调用。如果您需要在响应更新状态托变化（例如，复位），你可以比较this.props和nextProps和执行使用状态转换this.setState()在此方法
shouldComponentUpdate()
componentWillUpdate()
render()
componentDidUpdate()
卸载--组件销毁
componentWillUnmount()
componentDidCatch()

setState();
forceUpdate();
defaultProps

*/

      let $iframe = $('<iframe id="down-file-iframe" name="down-file-iframe" style="display: none;" />');
      let $form = $('<form target=""/>');
      $form.attr('method', 'post');
      $form.attr('action', url);

      let $input = $('<input />');
      $input.attr('type', 'hidden');
      $input.attr('name', key);
      $input.attr('value', JSON.stringify(data));

      $form.append($input);
      $iframe.append($form);
      $(document.body).append($iframe);
      $form[0].submit();
      $iframe.remove();
      <div style="display:none">
        <from action="" id="export"/>
        <iframe name="export"/>
      </div>
      let id = document.getElementById('export');
      let url = '123';
      id.action = url;
      id.submit();

	  alt 属性是一个必需的属性,它规定在图像无法显示时的替代文本

let date = new Date();
console.log(1, new Date() - date);
setTimeout(() => {
  console.log(3, new Date() - date);
}, 500);
Promise.resolve().then(console.log(3, new Date() - date));
while(new Date() - date < 1000) {}
console.log(4, new Date() - date);
输出值
1 0
VM111:6 3 1
VM111:8 4 1000
undefined
VM111:4 3 1002

图片懒加载
  <img src="Go.png" data-src="./photo.png" alt="">
  <img src="Go.png" data-src="./photo.png" alt="">
  <script>
    let num = document.getElementsByTagName('img').length;
    let img = document.getElementsByTagName("img");
    let n = 0; //存储图片加载到的位置，避免每次都从第一张图片开始遍历

    lazyload(); //页面载入完毕加载可是区域内的图片

    // window.onscroll = lazyload;
    window.addEventListener('scroll', lazyload);
    function lazyload() { //监听页面滚动事件
      let seeHeight = document.documentElement.clientHeight; //可见区域高度
      let scrollTop = document.documentElement.scrollTop || document.body.scrollTop; //滚动条距离顶部高度
      for (let i = n; i < num; i++) {
        if (img[i].offsetTop < seeHeight + scrollTop) {
          if (img[i].getAttribute("src") == "Go.png") {
            img[i].src = img[i].getAttribute("data-src");
          }
          n = i + 1;
        }
      }
    }
事件案例冒泡
	<body>
  <ul id="uld">
    <li>1</li>
    <li>2</li>
    <li>3</li>
  </ul>
  <script>
    // (function() {
    //   let id = document.querySelectorAll('li');
    //   for (let i of id) {
    //     i.onclick = showName;
    //   }
    //   function showName (e) {
    //     alert(e.target.innerHTML);
    //   }
    // })();
       (function() {
      let id = document.getElementById('uld');
      id.addEventListener('click', showName, true);
      function showName (e) {
        let x = e.target;
        x.nodeName.toLowerCase() === 'li' ? alert(e.target.innerHTML) : '';
      }
    })();
	  
	  
其实这个问题归结到最后，也可以抽象为一个问题：为什么抽象出来的 DOM 树只能有一个根？

从查找和遍历的角度来说，如果有多个根，那么我们的查找和遍历的效率会很低。
如果一个树有多个根，说明可以优化，肯定会有一个节点是可以访问到所有的节点，那这个节点就会成为新的根节点。
再从 Vue 本身来说，如果说一个组件有多个入口多个根，那不就意味着你的组件还可以进一步拆分成多个组件，进一步组件化，降低代码之间的耦合程度。
	  
SPA： Single Page Application（单页应用程序）
概念：就是只有一个Web页面的应用，是加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。
与传统多页面程序的区别：
????传统多页面程序：每次请求服务器返回的都是一个完整的页面
????单页应用程序：只有第一次会加载页面, 以后的每次请求, 仅仅是获取必要的数据.然后, 由页面中js解析获取的数据, 展示在页面中
优势：
????1 减少了请求体积，加快页面响应速度，降低了对服务器的压力
????2 更好的用户体验，让用户在web app感受native app的流畅
缺点：
? ? 因为技术使用了ajax，导致页面不利于SEO，但是可以通过其他技术去规避
? （SEO原则：搜索引擎的蜘蛛只识别href的一般超链接，而不识别JavaScript代码，遇到一般超链接就会爬进去，遇到JavaScript不会爬进去。即，搜索引擎抓不到AJAX动态加载的内容。）
? ? ? ? 1）服务端渲染? 2）页面静态化（专门为爬虫准备的）
主要技术点：
????1 ajax
????2 锚点的使用（window.location.hash #）
????3 hashchange 事件
实现思路：

????监听锚点值变化的事件，根据不同的锚点值，请求相应的数据

????????1 锚点（#）原本用作页面内部进行跳转，定位并展示相应的内容

????????2 SPA中，锚点被用作请求不同资源的标识，请求数据并展示内容
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <style>
      .div1 {
        display: inline-block;
        width: 100px;
        height: 100px;
        background-color: #fdfd04;
      }
      .divs {
        /* background-color: red; */
        font-size: 20px;
        font-weight: 600px;
        border-radius: 50%;
        border: 15px solid transparent;
        line-height: normal;
        letter-spacing: normal;
        /* border: 1px solid red; */
        /* box-shadow: 10px 10px 10px blue; */
        /* border-image: url(./dog.jpg) 30 30 stretch; */
      }
      .div2 {
        display: inline-block;
        width: 100px;
        height: 100px;
        background-color: #fdfd04;
      }
      .angle {
        width: 0px;
        height: 0px;
        border: 100px solid;
        border-left-color: transparent;
        border-right-color: transparent;
        border-top-color: transparent;
      }
      .pics {
        height: 150px;
        width: 200px;
        /* background-image: url(./dog.jpg), url(./photo.png); */
        background-position: left top, right bottom;
        background-repeat: no-repeat, repeat;
        /* padding: 100px; */
        /* background-image: linear-gradient(to right, red 80%, blue); */
        background-image: radial-gradient(red, blue, green);
        /* transform: rotate(90deg); translate(x,y) scale(2,3) skew(deg1,deg2)*/
        transform: skew(30deg, 20deg);
        /* gradients */
      }
      .tran {
        width: 100px;
        height: 100px;
        background-color: red;
        transition: width 2s, height 2s, transform 2s;
        /* transition过渡 */
      }
      .tran :hover {
        width: 500px;
        height: 500px;
        transform: rotate(60deg);
      }

      div .animations {
        position: relative;
        width: 200px;
        margin-left: 600px;
        height: 100px;
        background: red;
        animation: myfirst 5s;
        font-weight: 700;
        text-align: bottom;
      }

      @keyframes myfirst {
        0% {
          background: red;
          left: 0px;
          top: 0px;
        }
        25% {
          background: yellow;
          left: 200px;
          top: 0px;
        }
        50% {
          background: blue;
          left: 200px;
          top: 200px;
        }
        75% {
          background: green;
          left: 0px;
          top: 200px;
        }
        100% {
          background: red;
          left: 0px;
          top: 0px;
        }
      }
      .main {
        display: flex;
        /* justify-content: space-between; */
        /* flex-wrap: nowrap; */
        /* flex-direction: column; */
        align-items: center;
        /* align-content: flex-end; */
      }
      .left {
        height: 200px;
        background-color: red;
        width: 33.3%;
      }
      .center1 {
        height: 200px;
        background-color: yellow;
        width: 10%;
      }
      .center2 {
        height: 200px;
        background-color: blue;
        width: 13.3%;
      }
      .right {
        height: 200px;
        background-color: green;
        width: 13.3%;
      }
      .ani {
        width: 480px;
        height: 320px;
        margin: 50px auto;
        overflow: hidden;
        box-shadow: 0 0 5px rgba(0, 0, 0, 1);
        background-size: cover;
        background-position: center;
        -webkit-animation-name: 'loops';
        -webkit-animation-duration: 20s;
        -webkit-animation-iteration-count: infinite;
      }
      @-webkit-keyframes loops {
        0% {
          background: url(dog.jpg) no-repeat;
        }
        25% {
          background: url(http://b.hiphotos.baidu.com/image/w%3D400/sign=edee1572e9f81a4c2632edc9e72b6029/30adcbef76094b364d72bceba1cc7cd98c109dd0.jpg)
            no-repeat;
        }
        50% {
          background: url(http://b.hiphotos.baidu.com/image/w%3D400/sign=937dace2552c11dfded1be2353266255/d8f9d72a6059252d258e7605369b033b5bb5b912.jpg)
            no-repeat;
        }
        75% {
          background: url(http://g.hiphotos.baidu.com/image/w%3D400/sign=7d37500b8544ebf86d71653fe9f9d736/0df431adcbef76095d61f0972cdda3cc7cd99e4b.jpg)
            no-repeat;
        }
        100% {
          background: url(http://c.hiphotos.baidu.com/image/w%3D400/sign=cfb239ceb0fb43161a1f7b7a10a54642/3b87e950352ac65ce2e73f76f9f2b21192138ad1.jpg)
            no-repeat;
        }
      }
      #container     /**<img>的容器设置如下**/ {
        display: table-cell;
        text-align: center;
        vertical-align: middle;
      }
    </style>
  </head>
  <body>
    <div class="main">
      <!-- <div class="div1 divs">this is a test 123</div> -->
      <!-- <div class="div2 divs">this is a test11111</div> -->
      <!-- <img src="./dog.jpg" alt="" /> -->
      <!-- <div class="angle"></div> -->
      <!-- <div class="pics">
        <h1>123</h1>
        <h1>345</h1>
      </div> -->
      <!-- <div class="tran"></div> -->
      <!-- <div class="animations">大宝贝</div> -->
      <!-- <div class="left"></div>
      <div class="center1"></div>
      <div class="center2"></div>
      <div class="right"></div>
      <div class="ani"></div> -->
    </div>
    <img id="container" src="./dog.jpg" alt="" />
  </body>
</html>

手写一个promise 

function Promise(exe) {
	exe();
}
Promise.prototype.then = () {
}

class Promise {
  constructor(executor) {
    this.state = 'pending'; //初始状态
    this.value = ''; //成功获取的值
    this.reason = ''; //失败原因

    let resolve = (value) => {
      if ((this.state = 'pending')) {
        this.state = 'fullfiled';
        this.value = value;
      }
    };

    let reject = (reason) => {
      if ((this.state = 'pending')) {
        this.state = 'rejected';
        this.reason = reason;
      }
    };

    try {
      executor(resolve, reject);
    } catch (err) {
      reject(err);
    }
  }
  then(fullfiled, reject) {
    if ((this.state = 'fullfiled')) {
      fullfiled(this.value);
    }
    if ((this.state = 'rejected')) {
      reject(this.reason);
    }
  }
}
let promise = new Promise((resolve, reject) => {
  resolve('return resolve');
});

promise.then(
  () => {
    console.log('123123');
  },
  (err) => {
    console.log('error');
  }
);

有一个canvas，上面随机布着一些黑块，请实现方法，计算canvas上有多少个黑块
	       (function () {
        let ctxt = canvas.getContext('2d');
        let img = new Image();
        let coordinates = [];
        let h = 200,
          w = 350;
        for (let i = 0; i < 200; i++) {
          coordinates[i] = [];
        }
        img.src = './image.png'; //图片路径
        img.onload = function () {
          ctxt.drawImage(img, 0, 0);
          let data = ctxt.getImageData(0, 0, 350, 200).data; //读取整张图片的像素。
          let x = 0,
            y = 0;
          for (let i = 0, len = data.length; i < len; i += 4) {
            let red = data[i], //红色色深
              green = data[i + 1], //绿色色深
              blue = data[i + 2], //蓝色色深
              alpha = data[i + 3]; //透明度
            //把每个像素点，以二位数组的形式展开
            if (`${red} ${green} ${blue}` === '210 227 199') {
              coordinates[y][x] = 0;
            } else {
              coordinates[y][x] = 1;
            }
            x++;
            if (x >= 350) {
              x = 0;
              y++;
            }
          }
          // console.log(coordinates);
          // console.log(rst);
          console.log('个数： ' + rst.count);
        };
      })();
	  
	  
//
    let Person = {
      name: 'allin',
      age: 18,
      address: [{
          home: 'home',
          office: 'office',
      }],
      sclools: ['x','z'],
    };
    let child = {};
    function set(Person, child) {
      for (let i in Person) {
        if (typeof Person[i] === 'object') { //递归实现
          child[i] = Person[i].constructor === Array ? [] : {};
          set(Person[i], child[i]);
        } else {
          child[i] = Person[i];//非子对象or数组的为deepclone
        }
      }
    }
    child.address.home = 'wangbo'
	
	************************
Programmer.prototype = Object.create(Person.prototype); //建立继承关系
Programmer.prototype.constructor = Programmer;  // 修改constructor的指向


Programmer.prototype.work = function(){
    console.log('i am working code in '+ this.language);
    Person.prototype.eat.apply(this, arguments); // 调用父类上的方法
}



对象没有布局Iterator接口，无法使用for of 遍历。

如下可以实现
let obj = {
    id: '123',
    name: '张三',
    age: 18,
    gender: '男',
    hobbie: '睡觉'
}

obj[Symbol.iterator] = function () {
    let keyArr = Object.keys(obj)
    let index = 0
    return {
        next() {
            return index < keyArr.length ? {
                value: {
                    key: keyArr[index],
                    val: obj[keyArr[index++]]
                }
            } : {
                done: true
            }
        }
    }
}

for (let key of obj) {
  console.log(key)
}

对于图片的加载，特别适合用 race 方法来解决，将图片请求和超时判断放到一起，用 race 来实现图片的超时判断


